{"/home/travis/build/npmtest/node-npmtest-ali-mqs/test.js":"/* istanbul instrument in package npmtest_ali_mqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ali-mqs/lib.npmtest_ali_mqs.js":"/* istanbul instrument in package npmtest_ali_mqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ali_mqs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ali_mqs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ali-mqs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ali-mqs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ali_mqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ali_mqs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ali_mqs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ali_mqs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ali_mqs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ali_mqs.__dirname + '/lib.npmtest_ali_mqs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ali-mqs/node_modules/ali-mqs/index.js":"var AliMQS;\r\n(function (AliMQS) {\r\n    // The Ali account, it holds the key id and secret.\r\n    var Account = (function () {\r\n        function Account(ownerId, keyId, keySecret) {\r\n            this._ownerId = ownerId;\r\n            this._keyId = keyId;\r\n            this._keySecret = keySecret;\r\n        }\r\n        Account.prototype.getOwnerId = function () { return this._ownerId; };\r\n        Account.prototype.getKeyId = function () { return this._keyId; };\r\n        // encoding: \"hex\", \"binary\" or \"base64\"\r\n        Account.prototype.hmac_sha1 = function (text, encoding) {\r\n            var hmacSHA1 = CryptoA.createHmac(\"sha1\", this._keySecret);\r\n            return hmacSHA1.update(text).digest(encoding);\r\n        };\r\n        Account.prototype.b64md5 = function (text) {\r\n            var cryptoMD5 = CryptoA.createHash(\"md5\");\r\n            var md5HEX = cryptoMD5.update(text).digest(\"hex\");\r\n            var buf = new Buffer.Buffer(md5HEX, \"utf8\");\r\n            return buf.toString(\"base64\");\r\n        };\r\n        return Account;\r\n    })();\r\n    AliMQS.Account = Account;\r\n})(AliMQS || (AliMQS = {}));\r\nvar AliMQS;\r\n(function (AliMQS) {\r\n    // The MQ\r\n    var MQ = (function () {\r\n        // The constructor. name & account is required.\r\n        // region can be \"hangzhou\", \"beijing\" or \"qingdao\", the default is \"hangzhou\"\r\n        function MQ(name, account, region) {\r\n            this._region = \"hangzhou\";\r\n            this._pattern = \"http://%s.mqs-cn-%s.aliyuncs.com/%s\";\r\n            this._signalSTOP = true;\r\n            this._evStopped = \"AliMQS_MQ_NOTIFY_STOPPED\";\r\n            // 连续timeout计数器\r\n            // 在某种未知的原因下,网络底层链接断了\r\n            // 这时在程序内部的重试无法促使网络重连,以后的重试都是徒劳的\r\n            // 如果连续发生反复重试都依然timeout,那么极有可能已经发生此种情况了\r\n            // 这时抛出NetworkBroken异常\r\n            this._timeoutCount = 0;\r\n            this._timeoutMax = 128;\r\n            this._name = name;\r\n            this._account = account;\r\n            if (region)\r\n                this._region = region;\r\n            // make url\r\n            this._urlAttr = this.makeAttrURL();\r\n            this._url = this.makeURL();\r\n            // create the OpenStack object\r\n            this._openStack = new AliMQS.OpenStack(account);\r\n            // emitter\r\n            this._emitter = new Events.EventEmitter();\r\n        }\r\n        // 获取MQ的属性值\r\n        MQ.prototype.getAttrsP = function () {\r\n            debug(\"GET \" + this._urlAttr);\r\n            return this._openStack.sendP(\"GET\", this._urlAttr);\r\n        };\r\n        // 设置MQ的属性值\r\n        MQ.prototype.setAttrsP = function (options) {\r\n            var body = { Queue: options };\r\n            debug(\"PUT \" + this._urlAttr, body);\r\n            return this._openStack.sendP(\"PUT\", this._urlAttr + \"?metaoverride=true\", body);\r\n        };\r\n        // 发送消息\r\n        MQ.prototype.sendP = function (msg, priority, delaySeconds) {\r\n            var b64 = this.utf8ToBase64(msg);\r\n            var body = { Message: { MessageBody: b64 } };\r\n            if (!isNaN(priority))\r\n                body.Message.Priority = priority;\r\n            if (!isNaN(delaySeconds))\r\n                body.Message.DelaySeconds = delaySeconds;\r\n            debug(\"PUT \" + this._url, body);\r\n            return this._openStack.sendP(\"POST\", this._url, body);\r\n        };\r\n        // 接收消息\r\n        // waitSeconds, 最久等待多少秒0~30\r\n        MQ.prototype.recvP = function (waitSeconds) {\r\n            var _this = this;\r\n            var url = this._url;\r\n            if (waitSeconds)\r\n                url += \"?waitseconds=\" + waitSeconds;\r\n            debug(\"GET \" + url);\r\n            return new Promise(function (resolve, reject) {\r\n                var bGotResponse = false;\r\n                // wait more 5 seconds to trigger timeout error\r\n                var timeOutSeconds = 5;\r\n                if (waitSeconds)\r\n                    timeOutSeconds += waitSeconds;\r\n                setTimeout(function () {\r\n                    if (!bGotResponse)\r\n                        reject(new Error(\"timeout\"));\r\n                }, 1000 * timeOutSeconds);\r\n                _this._openStack.sendP(\"GET\", url).done(function (data) {\r\n                    debug(data);\r\n                    bGotResponse = true;\r\n                    if (data && data.Message && data.Message.MessageBody) {\r\n                        data.Message.MessageBody = _this.base64ToUtf8(data.Message.MessageBody);\r\n                    }\r\n                    resolve(data);\r\n                }, function (ex) {\r\n                    debug(ex);\r\n                    bGotResponse = true;\r\n                    reject(ex);\r\n                });\r\n            });\r\n        };\r\n        // 检查消息\r\n        MQ.prototype.peekP = function () {\r\n            var _this = this;\r\n            debug(\"GET \" + this._url);\r\n            return this._openStack.sendP(\"GET\", this._url + \"?peekonly=true\").then(function (data) {\r\n                debug(data);\r\n                if (data && data.Message && data.Message.MessageBody) {\r\n                    data.Message.MessageBody = _this.base64ToUtf8(data.Message.MessageBody);\r\n                }\r\n                return data;\r\n            });\r\n        };\r\n        // 删除消息\r\n        MQ.prototype.deleteP = function (receiptHandle) {\r\n            debug(\"DELETE \" + this._url);\r\n            return this._openStack.sendP(\"DELETE\", this._url + \"?ReceiptHandle=\" + receiptHandle);\r\n        };\r\n        // 保留消息\r\n        MQ.prototype.reserveP = function (receiptHandle, reserveSeconds) {\r\n            debug(\"PUT \" + this._url);\r\n            return this._openStack.sendP(\"PUT\", this._url\r\n                + \"?ReceiptHandle=\" + receiptHandle\r\n                + \"&VisibilityTimeout=\" + reserveSeconds);\r\n        };\r\n        // 消息通知.每当有消息收到时,都调用cb回调函数\r\n        // 如果cb返回true,那么将删除消息,否则保留消息\r\n        MQ.prototype.notifyRecv = function (cb, waitSeconds) {\r\n            this._signalSTOP = false;\r\n            this._timeoutCount = 0;\r\n            this.notifyRecvInternal(cb, waitSeconds || 5);\r\n        };\r\n        MQ.prototype.notifyRecvInternal = function (cb, waitSeconds) {\r\n            var _this = this;\r\n            // This signal will be triggered by notifyStopP()\r\n            if (this._signalSTOP) {\r\n                debug(\"notifyStopped\");\r\n                this._emitter.emit(this._evStopped);\r\n                return;\r\n            }\r\n            debug(\"notifyRecvInternal()\");\r\n            try {\r\n                this.recvP(waitSeconds).done(function (dataRecv) {\r\n                    try {\r\n                        debug(dataRecv);\r\n                        _this._timeoutCount = 0;\r\n                        if (cb(null, dataRecv)) {\r\n                            _this.deleteP(dataRecv.Message.ReceiptHandle)\r\n                                .done(null, function (ex) {\r\n                                console.log(ex);\r\n                            });\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                    }\r\n                    _this.notifyRecvInternal(cb, waitSeconds);\r\n                }, function (ex) {\r\n                    debug(ex);\r\n                    if ((!ex.Error) || (ex.Error.Code !== \"MessageNotExist\")) {\r\n                        cb(ex, null);\r\n                    }\r\n                    if (ex) {\r\n                        if (ex.message === \"timeout\") {\r\n                            _this._timeoutCount++;\r\n                            if (_this._timeoutCount > _this._timeoutMax) {\r\n                                // 极度可能网络底层断了\r\n                                cb(new Error(\"NetworkBroken\"), null);\r\n                            }\r\n                        }\r\n                        else if (ex.Error && ex.Error.Code === \"MessageNotExist\") {\r\n                            _this._timeoutCount = 0;\r\n                        }\r\n                    }\r\n                    process.nextTick(function () {\r\n                        _this.notifyRecvInternal(cb, waitSeconds);\r\n                    });\r\n                });\r\n            }\r\n            catch (ex) {\r\n                // ignore any ex \r\n                console.log(ex.toString());\r\n                // 过5秒重试\r\n                debug(\"Retry after 5 seconds\");\r\n                setTimeout(function () {\r\n                    _this.notifyRecvInternal(cb, waitSeconds);\r\n                }, 5000);\r\n            }\r\n        };\r\n        // 停止消息通知\r\n        MQ.prototype.notifyStopP = function () {\r\n            var _this = this;\r\n            if (this._signalSTOP)\r\n                return Promise.resolve(this._evStopped);\r\n            this._signalSTOP = true;\r\n            return new Promise(function (resolve) {\r\n                _this._emitter.once(_this._evStopped, function () {\r\n                    resolve(_this._evStopped);\r\n                });\r\n            });\r\n        };\r\n        MQ.prototype.makeAttrURL = function () {\r\n            return Util.format(this._pattern, this._account.getOwnerId(), this._region, this._name);\r\n        };\r\n        MQ.prototype.makeURL = function () {\r\n            return this.makeAttrURL() + \"/messages\";\r\n        };\r\n        MQ.prototype.utf8ToBase64 = function (src) {\r\n            var buf = new Buffer.Buffer(src, 'utf8');\r\n            return buf.toString('base64');\r\n        };\r\n        MQ.prototype.base64ToUtf8 = function (src) {\r\n            var buf = new Buffer.Buffer(src, 'base64');\r\n            return buf.toString('utf8');\r\n        };\r\n        return MQ;\r\n    })();\r\n    AliMQS.MQ = MQ;\r\n})(AliMQS || (AliMQS = {}));\r\nvar AliMQS;\r\n(function (AliMQS) {\r\n    // The MQS can list, create, delete, modify the mq.\r\n    var MQS = (function () {\r\n        // The constructor. account: ali account; region: can be \"hangzhou\", \"beijing\" or \"qingdao\", default is \"hangzhou\"\r\n        function MQS(account, region) {\r\n            this._region = \"hangzhou\"; // region: hangzhou, beijing, qingdao\r\n            this._pattern = \"http://%s.mqs-cn-%s.aliyuncs.com\";\r\n            // save the input arguments\r\n            this._account = account;\r\n            if (region)\r\n                this._region = region;\r\n            // make url\r\n            this._url = this.makeURL();\r\n            // create the OpenStack object\r\n            this._openStack = new AliMQS.OpenStack(account);\r\n        }\r\n        // List all mqs.\r\n        MQS.prototype.listP = function (prefix, pageSize, pageMarker) {\r\n            var headers = {};\r\n            if (prefix)\r\n                headers[\"x-mqs-prefix\"] = prefix;\r\n            if (pageMarker)\r\n                headers[\"x-mqs-marker\"] = pageMarker;\r\n            if (pageSize)\r\n                headers[\"x-mqs-ret-number\"] = pageSize;\r\n            return this._openStack.sendP(\"GET\", this._url, null, headers);\r\n        };\r\n        // Create a message queue\r\n        MQS.prototype.createP = function (name, options) {\r\n            var body = { Queue: \"\" };\r\n            if (options)\r\n                body.Queue = options;\r\n            var url = Url.resolve(this._url, name);\r\n            return this._openStack.sendP(\"PUT\", url, body);\r\n        };\r\n        // Delete a message queue\r\n        MQS.prototype.deleteP = function (name) {\r\n            var url = Url.resolve(this._url, name);\r\n            return this._openStack.sendP(\"DELETE\", url);\r\n        };\r\n        MQS.prototype.makeURL = function () {\r\n            return Util.format(this._pattern, this._account.getOwnerId(), this._region);\r\n        };\r\n        return MQS;\r\n    })();\r\n    AliMQS.MQS = MQS;\r\n})(AliMQS || (AliMQS = {}));\r\n// The Ali open interface stack\r\nvar AliMQS;\r\n(function (AliMQS) {\r\n    // the ali open interface stack protocol\r\n    var OpenStack = (function () {\r\n        function OpenStack(account) {\r\n            this._patternMQS = \"MQS %s:%s\";\r\n            this._patternSign = \"%s\\n%s\\n%s\\n%s\\n%s%s\";\r\n            this._contentType = \"text/xml;charset=utf-8\";\r\n            this._version = \"2014-07-08\";\r\n            this._account = account;\r\n            // xml builder\r\n            this._xmlBuilder = new Xml2js.Builder();\r\n        }\r\n        // Send the request\r\n        // method: GET, POST, PUT, DELETE\r\n        // url: request url\r\n        // body: optional, request body\r\n        // head: optional, request heads\r\n        OpenStack.prototype.sendP = function (method, url, body, headers) {\r\n            var req = { method: method, url: url };\r\n            if (body)\r\n                req.body = this._xmlBuilder.buildObject(body);\r\n            req.headers = this.makeHeaders(method, url, headers, req.body);\r\n            return Request.requestP(req).then(function (response) {\r\n                // convert the body from xml to json\r\n                return Xml2js.parseStringP(response.body, { explicitArray: false })\r\n                    .then(function (bodyJSON) {\r\n                    response.bodyJSON = bodyJSON;\r\n                    return response;\r\n                }, function () {\r\n                    // cannot parse as xml\r\n                    response.bodyJSON = response.body;\r\n                    return response;\r\n                });\r\n            }).then(function (response) {\r\n                if (response.statusCode < 400) {\r\n                    if (response.bodyJSON)\r\n                        return response.bodyJSON;\r\n                    else\r\n                        return response.statusCode;\r\n                }\r\n                else {\r\n                    if (response.bodyJSON)\r\n                        return Promise.reject(response.bodyJSON);\r\n                    else\r\n                        return Promise.reject(response.statusCode);\r\n                }\r\n            });\r\n        };\r\n        OpenStack.prototype.makeHeaders = function (mothod, url, headers, body) {\r\n            // if not exist, create one\r\n            if (!headers)\r\n                headers = {};\r\n            var contentMD5 = \"\";\r\n            var contentType = \"\";\r\n            if (body) {\r\n                if (!headers[\"Content-Length\"])\r\n                    headers[\"Content-Length\"] = body.length;\r\n                if (!headers[\"Content-Type\"])\r\n                    headers[\"Content-Type\"] = this._contentType;\r\n                contentType = headers[\"Content-Type\"];\r\n                contentMD5 = this._account.b64md5(body);\r\n                headers[\"Content-MD5\"] = contentMD5;\r\n            }\r\n            if (!headers[\"x-mqs-version\"])\r\n                headers[\"x-mqs-version\"] = this._version;\r\n            // lowercase & sort & extract the x-mqs-<any>\r\n            var headsLower = {};\r\n            var keys = [];\r\n            for (var key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    var lower = key.toLowerCase();\r\n                    keys.push(lower);\r\n                    headsLower[lower] = headers[key];\r\n                }\r\n            }\r\n            keys.sort();\r\n            var mqsHeaders = \"\";\r\n            for (var i in keys) {\r\n                var k = keys[i];\r\n                if (k.indexOf(\"x-mqs-\") === 0) {\r\n                    mqsHeaders += Util.format(\"%s:%s\\n\", k, headsLower[k]);\r\n                }\r\n            }\r\n            var tm = (new Date()).toUTCString();\r\n            var mqsURL = Url.parse(url);\r\n            headers.Date = tm;\r\n            headers.Authorization = this.authorize(mothod, mqsURL.path, mqsHeaders, contentType, contentMD5, tm);\r\n            headers.Host = mqsURL.host;\r\n            return headers;\r\n        };\r\n        // ali mqs authorize header\r\n        OpenStack.prototype.authorize = function (httpVerb, mqsURI, mqsHeaders, contentType, contentMD5, tm) {\r\n            return Util.format(this._patternMQS, this._account.getKeyId(), this.signature(httpVerb, mqsURI, mqsHeaders, contentType, contentMD5, tm));\r\n        };\r\n        // ali mqs signature\r\n        OpenStack.prototype.signature = function (httpVerb, mqsURI, mqsHeaders, contentType, contentMD5, tm) {\r\n            var text = Util.format(this._patternSign, httpVerb, contentMD5, contentType, tm, mqsHeaders, mqsURI);\r\n            return this._account.hmac_sha1(text, \"base64\");\r\n        };\r\n        return OpenStack;\r\n    })();\r\n    AliMQS.OpenStack = OpenStack;\r\n})(AliMQS || (AliMQS = {}));\r\n/// <reference path=\"../dts/external.d.ts\" />\r\n// Exports the AliMQS\r\nmodule.exports = AliMQS;\r\n// dependencies\r\nvar Buffer = require(\"buffer\");\r\nvar CryptoA = require(\"crypto\");\r\nvar Events = require(\"events\");\r\nvar Util = require(\"util\");\r\nvar Url = require(\"url\");\r\nvar debug = require(\"debug\")(\"ali-mqs\");\r\nvar Promise = require(\"promise\");\r\nvar Request = require(\"request\");\r\nRequest.requestP = Promise.denodeify(Request);\r\n// Request.debug = true;\r\nvar Xml2js = require(\"xml2js\");\r\nXml2js.parseStringP = Promise.denodeify(Xml2js.parseString);\r\n//# sourceMappingURL=index.js.map"}